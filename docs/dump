#!/bin/bash
#set -o verbose

cat <<EOF1
---
title: Saturation
---

<!-- <link rel="stylesheet" href="./foo.css"> -->
<script src="./foo.js"></script>

<fieldset>
    <legend>Columns</legend>
    <input type="checkbox" id="show-target"><label for="show-target">Show Target</label>
    <input type="checkbox" id="show-op"><label for="show-op">Show Op</label>
    <input type="checkbox" id="show-cpp"><label for="show-cpp">Show C++ Code</label>
    <input type="checkbox" id="show-asm" checked><label for="show-asm">Show Compiler Output</label>
</fieldset>
<label for="targets-select">Target:</label>
<select name="targets" id="targets-select">
<option value="cpu-x86_64">x86-64</option>
<option value="cpu-arm">ARM</option>
<option value="cpu-arm64">ARM64</option>
</select>
<label for="op-select">Operation:</label>
<select name="op" id="op-select">
<option value="op-add">add</option>
<option value="op-sub">subtract</option>
<option value="op-mul">multiply</option>
<option value="op-div">divide</option>
</select>

<table>
<thead>
<tr>
<th class="column-target">Target</th>
<th class="column-bits">Bits</th>
<th class="column-op">Op</th>
<th class="column-sign">Signed</th>
<th class="column-cpp">C++ Code</th>
<th class="column-asm">Compiler Output</th>
</tr>
</thead>
<tbody>

EOF1

for cpu in x86_64 arm arm64; do
  if [ $cpu == x86_64 ]; then
    cpu_class_name="cpu-x86_64"
    cpu_language_name="armasm"
  elif [ $cpu == arm ]; then
    cpu_class_name="cpu-arm"
    cpu_language_name="armasm"
  elif [ $cpu == arm64 ]; then
    cpu_class_name="cpu-arm64"
    cpu_language_name="armasm"
  else
    cpu_class_name="cpu-unknown"
    cpu_language_name="unknown"
  fi

  for fn in add sub mul div; do
    for (( bits=4; bits<=64; bits += 1 )); do
      for sign in s u; do
        cpp=$(mktemp)
        asm=$(mktemp)
        sed -e "s/_X_/${bits}/g" -e "s/_S_/${sign}/g" -e "s/_FN_/${fn}/" > $cpp <<EOF
#include "saturation.hpp"
using namespace saturation;
extern "C" _S_integer_t<_X_>
f (_S_integer_t<_X_> a,
   _S_integer_t<_X_> b) {
    return _FN__S_<_X_>(a, b);
}
EOF
        clang++ -I.. -x c++ -std=c++17 -S -O3 -DNDEBUG -target $cpu-apple-darwin20.1.0 -o $asm $cpp
        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        # delete assembler directives and comment lines.
        sed -I '' -e '/^[[:space:]]*[.@#;]/d' $asm

        sign_class_name="sign-$sign"
        if [ $sign == 's' ]; then 
          sign_name="signed"
        else
          sign_name="unsigned"
        fi

        echo "<tr class='$sign_class_name op-$fn $bits $cpu_class_name'>"
        echo "<td class='column-target'>$cpu</td>"
        echo "<td class='column-bits'>$bits</td>"
        echo "<td class='column-op'>$fn</td>"
        echo "<td class='column-sign'>$sign_name</td>"

        echo "<td class='column-cpp'>"
        echo "{% highlight cpp %}"
        cat "$cpp"
        echo "{% endhighlight %}"
        echo "</td>"
        echo "<td class='column-asm'>"
        echo ""
        echo "{% highlight $cpu_language_name %}"
        cat $asm
        echo "{% endhighlight %}"
        echo "</td>"
        echo "</tr>"
        rm $cpp $asm
      done
    done
  done
done

cat <<TABLE_END_EOF
</tbody>
</table>
TABLE_END_EOF
