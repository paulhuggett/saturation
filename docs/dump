#!/bin/bash
#set -o verbose

# set up Intel ICC.
#. /opt/intel/oneapi/setvars.sh > /dev/null

cat <<EOF1
---
title: Saturation
---

<script src="./sorttable.js" type="module"></script>
<script src="./table.js" type="module"></script>

<fieldset>
  <legend>Columns</legend>
  <div style="display:inline-flex;">
    <input type="checkbox" id="show-target">
    <label for="show-target">Show Target</label></div>
  <div style="display:inline-flex;">
    <input type="checkbox" id="show-op">
    <label for="show-op">Show Op</label>
  </div>
  <div style="display:inline-flex;">
    <input type="checkbox" id="show-cpp">
    <label for="show-cpp">Show C++ Code</label>
  </div>
  <div style="display:inline-flex;">
    <input type="checkbox" id="show-asm" checked>
    <label for="show-asm">Show Compiler Output</label>
  </div>
</fieldset>
<fieldset>
  <legend>Filter</legend>
  <div style="display:inline-flex;">
    <label for="sign-select">Sign:</label>
    <select name="sign" id="sign-select">
      <option value="">Show All</option>
      <option value="sign-u">Unsigned</option>
      <option value="sign-s">Signed</option>
    </select>
  </div>
  <div style="display:inline-flex;">
    <label for="bits-select">Bits:</label>
    <select name="bits" id="bits-select">
      <option value="">Show All</option>
      <option value="bits-x4">Multiples of 4</option>
      <option value="bits-x8">Multiples of 8</option>
      <option value="bits-p2">Register Widths</option>
    </select>
  </div>
  <div style="display:inline-flex;">
    <label for="targets-select">Target:</label>
    <select name="targets" id="targets-select">
      <option value="">Show All</option>
      <option value="cpu-x86_64">x86-64</option>
      <option value="cpu-arm">ARM</option>
      <option value="cpu-arm64">ARM64</option>
    </select>
  </div>
  <div style="display:inline-flex;">
    <label for="op-select">Operation:</label>
    <select name="op" id="op-select">
      <option value="">Show All</option>
      <option value="op-add">add</option>
      <option value="op-sub">subtract</option>
      <option value="op-mul">multiply</option>
      <option value="op-div">divide</option>
    </select>
  </div>
</fieldset>
<p>Note: You can sort by each column by clicking on the column header.</p>
<table id="out-table">
  <thead>
    <tr>
      <th class="column-target">Target</th>
      <th class="column-bits">Bits</th>
      <th class="column-op">Op</th>
      <th class="column-sign">Signed</th>
      <th class="column-cpp sorttable_nosort">C++ Code</th>
      <th class="column-asm sorttable_nosort">Compiler Output</th>
    </tr>
  </thead>
<tbody>

EOF1

function is_power_of_two () {
    declare -i n=$1
    (( n > 0 && (n & (n - 1)) == 0 ))
}

for cpu in x86_64 arm arm64; do
  if [ $cpu == x86_64 ]; then
    cpu_class_name="cpu-x86_64"
    cpu_language_name="armasm"
  elif [ $cpu == arm ]; then
    cpu_class_name="cpu-arm"
    cpu_language_name="armasm"
  elif [ $cpu == arm64 ]; then
    cpu_class_name="cpu-arm64"
    cpu_language_name="armasm"
  else
    cpu_class_name="cpu-unknown"
    cpu_language_name="unknown"
  fi

  for fn in add sub mul div; do
    for (( bits=4; bits<=64; bits += 1 )); do
      for sign in s u; do
        cpp=$(mktemp)
        asm=$(mktemp)
        sed -e "s/_X_/${bits}/g" -e "s/_S_/${sign}/g" -e "s/_FN_/${fn}/" > $cpp <<EOF
#include "saturation/saturation.hpp"
using namespace saturation;
extern "C" _S_integer_t<_X_>
f (_S_integer_t<_X_> a,
   _S_integer_t<_X_> b) {
    return _FN__S_<_X_>(a, b);
}
EOF
        clang++ -I.. -x c++ -std=c++17 -S -O3 -DNDEBUG -target $cpu-apple-darwin20.1.0 -I ../include -o $asm $cpp
        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        # delete assembler directives and comment lines.
        sed -I '' -e '/^[[:space:]]*[.@#;]/d' $asm

        sign_class_name="sign-$sign"
        if [ $sign == 's' ]; then 
          sign_name="signed"
        else
          sign_name="unsigned"
        fi

        bits_class=""
        if [[ $(expr $bits % 4) -eq 0 ]]; then
          bits_class="$bits_class bits-x4"
        fi
        if [[ $(expr $bits % 8) -eq 0 ]]; then
          bits_class="$bits_class bits-x8"
        fi
        # Register width
        if ( is_power_of_two $bits ) && [ $bits -ge 8 ]; then 
          bits_class="$bits_class bits-p2"
        fi
        selector="$sign_class_name op-$fn $bits $cpu_class_name $bits_class"
        echo $selector 1>&2

        echo "<tr class='$selector'>"
        echo "<td class='column-target'>$cpu</td>"
        echo "<td class='column-bits'>$bits</td>"
        echo "<td class='column-op'>$fn</td>"
        echo "<td class='column-sign'>$sign_name</td>"

        echo "<td class='column-cpp'>"
        echo "{% highlight cpp %}"
        cat "$cpp"
        echo "{% endhighlight %}"
        echo "</td>"
        echo "<td class='column-asm'>"
        echo ""
        echo "{% highlight $cpu_language_name %}"
        cat $asm
        echo "{% endhighlight %}"
        echo "</td>"
        echo "</tr>"
        rm $cpp $asm
      done
    done
  done
done

cat <<TABLE_END_EOF
</tbody>
</table>
TABLE_END_EOF
